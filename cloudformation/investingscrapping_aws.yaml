AWSTemplateFormatVersion: "2010-09-09"
Description: "Investing Scrapping"

Parameters:

  ProjectName:
      Description: "Please enter the name of the project"
      Type: String
      Default: "Test Project"

  EC2KeyName:
    Description: "Key Name to access the EC2 instance"
    Type: String
    Default: pytradejobs

  ImageId:
    Description: "Please informe the id to the AMI image to be used by the EC2 instance"
    Type: String
    Default: ami-0ab3c2ffcf795a8a9

  Ec2InstanceType:
    Description: "EC2 instance type"
    Type: String
    Default: "t1.micro"


  NeedsEBSVolume:
    Description: "Does the EC2 instance needs an EBS Volume?"
    Type: String
    Default: false
    AllowedValues: [true, false]

  EBSVolumeId:
    Description: "Id of pre-existent EBS Volume"
    Default: ""
    Type: "String"

  EC2MarketType:
    Description: "Utilizar spot instances ou on-demand"
    Type: String
    AllowedValues: ["Spot", "On-demand"]
    Default: "Spot"

  NetworkStack:
    Type: "String"
    Description: "Network stack to apply to."

Conditions:
  ShouldUseEBSVolume: !Equals [!Ref NeedsEBSVolume, "true"]
  ShouldCreateNewEBSVolume: !And
    - !Equals [!Ref EBSVolumeId, ""]
    - !Equals [!Ref NeedsEBSVolume, "true"]
  UseSpotInstance: !Equals [!Ref EC2MarketType, "Spot"]
  UseOnDemandInstance: !Equals [!Ref EC2MarketType, "On-demand"]

Resources:

######EC2 on-demand instance
  EC2OnDemandInstance:
    Type: AWS::EC2::Instance
    Condition: UseOnDemandInstance
    Properties:
      InstanceType: !Ref Ec2InstanceType
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${NetworkStack}-SshAccessSecurityGroupId"
        - Fn::ImportValue: !Sub "${NetworkStack}-DockerDaemonAccessSecurityGroupId"
        - Fn::ImportValue: !Sub "${NetworkStack}-MongoAccessSecurityGroupId"
      KeyName: !Ref EC2KeyName
      ImageId: !Ref ImageId
      SubnetId:
        Fn::ImportValue: !Sub "${NetworkStack}-SubnetId"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "testing cloud init"
          if [ "${NeedsEBSVolume}" = "true" ];
          then
            if [ ! "${EBSVolumeId}" ];
            then
              mkfs -t ext4 /dev/sdh
            fi
            mkdir /mnt/ebs_data
            mount /dev/sdh /mnt/ebs_data/
          fi

          DOCKER_HOST=tcp://localhost:2375 docker run --name stock_data_db -v /mnt/ebs_data/mongodata:/data/db -p 27017:27017 -d mongo:4-xenial
          DOCKER_HOST=tcp://localhost:2375 docker run -d --name investing_scrapping_container --link stock_data_db:stock_data_db  gabrielpreti/investing_scrapping python investing_data_collector.py --mongohost=stock_data_db
          DOCKER_HOST=tcp://localhost:2375  docker wait investing_scrapping_container
          sudo shutdown -h now

######EC2 spot instance
  EC2SpotInstance:
    Type: AWS::EC2::Instance
    Condition: UseSpotInstance
    DependsOn:
    - EC2LaunchTemplate
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: 1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${NetworkStack}-SshAccessSecurityGroupId"
        - Fn::ImportValue: !Sub "${NetworkStack}-DockerDaemonAccessSecurityGroupId"
        - Fn::ImportValue: !Sub "${NetworkStack}-MongoAccessSecurityGroupId"
      SubnetId:
        Fn::ImportValue: !Sub "${NetworkStack}-SubnetId"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "testing cloud init"
          if [ "${NeedsEBSVolume}" = "true" ];
          then
            if [ ! "${EBSVolumeId}" ];
            then
              mkfs -t ext4 /dev/sdh
            fi
            mkdir /mnt/ebs_data
            mount /dev/sdh /mnt/ebs_data/
          fi

          DOCKER_HOST=tcp://localhost:2375 docker run --name stock_data_db -v /mnt/ebs_data/mongodata:/data/db -p 27017:27017 -d mongo:4-xenial
          DOCKER_HOST=tcp://localhost:2375 docker run -d --name investing_scrapping_container --link stock_data_db:stock_data_db  gabrielpreti/investing_scrapping python investing_data_collector.py --mongohost=stock_data_db
          DOCKER_HOST=tcp://localhost:2375  docker wait investing_scrapping_container
          sudo shutdown -h now

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: UseSpotInstance
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceMarketOptions:
          MarketType: spot
        InstanceType: !Ref Ec2InstanceType
        KeyName: !Ref EC2KeyName


  EBSVolume:
    Type: AWS::EC2::Volume
    Condition: ShouldCreateNewEBSVolume
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Encrypted: false
      Size: 2

  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Condition: ShouldUseEBSVolume
    Properties:
      InstanceId: !If [UseSpotInstance, !Ref EC2SpotInstance, !Ref EC2OnDemandInstance]
      VolumeId:
        !If [ShouldCreateNewEBSVolume, !Ref EBSVolume, !Ref EBSVolumeId]
      Device: "/dev/sdh"

Outputs:

  Ec2InstanceId:
    Description: "Id of the EC2 instance created"
    Value: !If [UseSpotInstance, !Ref EC2SpotInstance, !Ref EC2OnDemandInstance]

  Ec2InstancePublicIp:
    Description: "Public IP address of the EC2 instance created"
    Value: !If [UseSpotInstance, !GetAtt EC2SpotInstance.PublicIp, !GetAtt EC2OnDemandInstance.PublicIp]

  Ec2InstancePrivateIp:
    Description: "Private IP address of the EC2 instance created"
    Value: !If [UseSpotInstance, !GetAtt EC2SpotInstance.PrivateIp, !GetAtt EC2OnDemandInstance.PrivateIp]